import { default as P } from 'antd/lib/typography/Paragraph';
import Title from 'antd/lib/typography/Title';

export const VirtualDom: React.FC = () => {
  return (
    <div className="site-layout-content">
      <Title className="title">Virtual DOM</Title>
      <P className="block-text">
        Вместо того, чтобы взаимодействовать с DOM напрямую, мы работаем с его легковесной копией.
        Мы можем вносить изменения в копию, исходя из наших потребностей, а после этого применять
        изменения к реальному DOM. При этом происходит сравнение DOM-дерева с его виртуальной
        копией, определяется разница и запускается перерисовка того, что было изменено.
      </P>
      <P className="block-text">
        Такой подход работает быстрее, потому как не включает в себя все тяжеловесные части
        реального DOM. Но только если мы делаем это правильно. Есть две проблемы: когда именно
        делать повторную перерисовку DOM и как это сделать эффективно.
      </P>
      <Title level={2}>Когда?</Title>
      <span className="block-text">Когда данные изменяются и нуждается в обновлении.</span>
      <span className="block-text">Есть два варианта узнать, что данные изменились:</span>
      <P className="block-text"></P>
      <ul>
        <li className="block-text">
          Первый из них — «dirty checking» (грязная проверка) заключается в том, чтобы опрашивать
          данные через регулярные промежутки времени и рекурсивно проверять все значения в структуре
          данных.
        </li>
        <li className="block-text">
          Второй вариант — «observable» (наблюдаемый) заключается в наблюдении за изменением
          состояния. Если ничего не изменилось, мы ничего не делаем. Если изменилось, мы точно
          знаем, что нужно обновить.
        </li>
      </ul>
      <Title level={2}>Как?</Title>
      <P className="block-text">Что делает этот подход действительно быстрым:</P>
      <ul>
        <li className="block-text">Эффективные алгоритмы сравнения</li>
        <li className="block-text">Группировка операций чтения/записи при работе с DOM</li>
        <li className="block-text">Эффективное обновление только под-деревьев</li>
      </ul>
    </div>
  );
};
